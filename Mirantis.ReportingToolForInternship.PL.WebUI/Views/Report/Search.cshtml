@using Mirantis.ReportingToolForInternship.PL.WebUI.Models.Repositories
@model Mirantis.ReportingToolForInternship.PL.WebUI.Models.SearchVM

@{
    ViewBag.Title = "Search";
    AjaxOptions ajaxOpts = new AjaxOptions
    {
        UpdateTargetId = "OutputReports",
        Url = Url.Action("ShowSearchResult"),
        OnSuccess = "slideDownOutputReports"
    };
}

<h2>Search reports</h2>

@using (Ajax.BeginForm(ajaxOpts))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="col-xs-12 col-md-6 form-group">
            @Html.LabelFor(model => model.InternName, htmlAttributes: new { @class = "control-label col-xs-4" })
            <div class="col-xs-8">
                <select name="InternName" id="InternName" class="selectpicker">
                    <option value="All">All</option>
                    @foreach (var item in UserRepo.Repo)
                    {
                        <option value="@item.Name">
                            @string.Format("{0} - {1}", item.Name, item.Email)
                        </option>
                    }
                </select>
                @Html.ValidationMessageFor(model => model.InternName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-xs-12 col-md-6 form-group">
            @Html.LabelFor(model => model.MentorName, htmlAttributes: new { @class = "control-label col-xs-4" })
            <div class="col-xs-8">
                <select name="MentorName" id="MentorName" class="selectpicker">
                    <option value="All" id="AllMentors">All</option>
                    @foreach (var item in UserRepo.Repo)
                    {
                        <option value="@item.Name">
                            @string.Format("{0} - {1}", item.Name, item.Email)
                        </option>
                    }
                </select>
                @Html.ValidationMessageFor(model => model.MentorName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-xs-12 col-md-6 form-group">
            @Html.LabelFor(model => model.DateFrom, htmlAttributes: new { @class = "control-label col-xs-4" })
            <div class="col-xs-8">
                <div class='input-group date'>
                    @Html.EditorFor(model => model.DateFrom, new { htmlAttributes = new { @class = "form-control", @type = "text", @readonly = "true" } })
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
                @Html.ValidationMessageFor(model => model.DateFrom, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-xs-12 col-md-6 form-group">
            @Html.LabelFor(model => model.DateTo, htmlAttributes: new { @class = "control-label col-xs-4" })
            <div class="col-xs-8">
                <div class='input-group date'>
                    @Html.EditorFor(model => model.DateTo, new { htmlAttributes = new { @class = "form-control", @type = "text", @readonly = "true" } })
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
                @Html.ValidationMessageFor(model => model.DateTo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-xs-12 col-md-6 col-md-offset-6 form-group">
            @Html.LabelFor(model => model.TypeOccuring, htmlAttributes: new { @class = "control-label col-xs-4" })
            <div class="col-xs-8">
                <select name="TypeOccuring" id="TypeOccuring" class="selectpicker">
                    @foreach (var type in TypeOccuringRepo.AllTypes)
                    {
                        <option value="@type">@type</option>
                    }
                </select>
                @Html.ValidationMessageFor(model => model.TypeOccuring, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-xs-12 col-md-6 col-md-offset-6 form-group">
            @Html.LabelFor(model => model.TypeOrigin, htmlAttributes: new { @class = "control-label col-xs-4" })
            <div class="col-xs-8">
                <select name="TypeOrigin" id="TypeOrigin" class="selectpicker">
                    @foreach (var type in TypeOriginRepo.AllTypes)
                    {
                        <option value="@type">@type</option>
                    }
                </select>
                @Html.ValidationMessageFor(model => model.TypeOrigin, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Search" class="btn btn-default" />
            </div>
        </div>
    </div>

    <div id="OutputReports">
    </div>
}

@section scripts {
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/Scripts/bootstrap-select.min.js"></script>
    <script src="~/Scripts/moment.min.js"></script>
    <script src="~/Scripts/bootstrap-datetimepicker.min.js"></script>
    <script>
        function slideDownOutputReports() {
            $("#OutputReports")
                .hide()
                .slideDown(300);
        }
    </script>
    <script src="~/Scripts/Custom/changeRulesValidation.js"></script>
    <script src="~/Scripts/Custom/setSettingDatePickerOnSearchForm.js"></script>
    <script src="~/Scripts/Custom/disableMentorsDropdown.js"></script>
}