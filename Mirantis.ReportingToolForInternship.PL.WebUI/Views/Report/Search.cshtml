@using Mirantis.ReportingTool.PL.WebUI.Models.Repositories
@using Mirantis.ReportingTool.PL.WebUI.Constants
@model Mirantis.ReportingTool.PL.WebUI.Models.SearchReportVM

@{
	ViewBag.Title = "Search reports";
	AjaxOptions ajaxOpts = new AjaxOptions
	{
		UpdateTargetId = "OutputReports",
		Url = Url.Action("ShowSearchResult"),
		OnSuccess = "slideDownOutputReports",
		OnBegin = "beginSearch",
		OnComplete = "completeSearch",
		OnFailure = "alertAboutFail",
	};
}

<h2>Search reports</h2>

@using (Ajax.BeginForm(ajaxOpts))
{

	@Html.AntiForgeryToken()

	<div class="form-horizontal">
		<hr />

		@Html.ValidationSummary(true, "", new { @class = "text-danger" })
		<div class="row">
			<div class="col-xs-12 col-md-6">
				@Html.LabelFor(model => model.EngineerId, htmlAttributes: new { @class = "control-label col-xs-4" })
				<div class="col-xs-8">
					<select name="EngineerId" id="EngineerId" class="selectpicker" data-live-search="true" data-size="5">
						<option value="">All</option>
						@foreach (var item in UserLogicProvider.UserLogic.GetUsersByRole(AppRoles.Engineer))
						{
							<option value="@item.Id">
								@string.Format("{0} - {1}", item.FullName, item.Login)
							</option>
						}
					</select>
					@Html.ValidationMessageFor(model => model.EngineerId, "", new { @class = "text-danger" })
				</div>
			</div>

			<div class="col-xs-12 col-md-6">
				@Html.LabelFor(model => model.ManagerId, htmlAttributes: new { @class = "control-label col-xs-4" })
				<div class="col-xs-8">
					<select name="ManagerId" id="ManagerId" class="selectpicker" data-live-search="true" data-size="5">
						<option value="">All</option>
						@foreach (var item in UserLogicProvider.UserLogic.GetUsersByRole(AppRoles.Manager))
						{
							<option value="@item.Id">
								@string.Format("{0} - {1}", item.FullName, item.Login)
							</option>
						}
					</select>
					@Html.ValidationMessageFor(model => model.ManagerId, "", new { @class = "text-danger" })
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-xs-12 col-md-6">
				@Html.LabelFor(model => model.DateFrom, htmlAttributes: new { @class = "control-label col-xs-4" })
				<div class="col-xs-8">
					<div class="input-group date">
						@Html.EditorFor(model => model.DateFrom, new { htmlAttributes = new { @class = "form-control", @type = "text", @readonly = "true" } })
						<span class="input-group-addon">
							<span class="glyphicon glyphicon-calendar"></span>
						</span>
					</div>
					@Html.ValidationMessageFor(model => model.DateFrom, "", new { @class = "text-danger" })
				</div>
			</div>

			<div class="col-xs-12 col-md-6">
				@Html.LabelFor(model => model.DateTo, htmlAttributes: new { @class = "control-label col-xs-4" })
				<div class="col-xs-8">
					<div class="input-group date">
						@Html.EditorFor(model => model.DateTo, new { htmlAttributes = new { @class = "form-control", @type = "text", @readonly = "true" } })
						<span class="input-group-addon">
							<span class="glyphicon glyphicon-calendar"></span>
						</span>
					</div>
					@Html.ValidationMessageFor(model => model.DateTo, "", new { @class = "text-danger" })
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-xs-12 col-md-6">
				@Html.LabelFor(model => model.TypeOrigin, htmlAttributes: new { @class = "control-label col-xs-4" })
				<div class="col-xs-8">
					<select name="TypeOrigin" id="TypeOrigin" class="selectpicker">
						@foreach (var type in TypeOriginRepo.AllTypes)
						{
							<option value="@type">@type</option>
						}
					</select>
					@Html.ValidationMessageFor(model => model.TypeOrigin, "", new { @class = "text-danger" })
				</div>
			</div>

			<div class="col-xs-12 col-md-6">
				@Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-xs-4" })
				<div class="col-xs-8">
					@Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-xs-12 col-md-6">
				@Html.LabelFor(model => model.TaskId, htmlAttributes: new { @class = "control-label col-xs-4" })
				<div class="col-xs-8">
					<select name="TaskId" id="TypeOrigin" class="selectpicker">
						@foreach (var task in TaskLogicProvider.TaskLogic.GetByUserId(Guid.Parse(User.Identity.Name)))
						{
							<option value="@task.Id">@task.Title</option>
						}
					</select>
					@Html.ValidationMessageFor(model => model.TypeOrigin, "", new { @class = "text-danger" })
				</div>
			</div>
		</div>

		<div class="row">
			<div class="text-center">
				<input type="submit" value="Search" class="btn btn-default" />
			</div>
		</div>
	</div>

	<div id="LoadingStatus" class="text-center">
		<img src="~/Images/loading.gif" />
	</div>

	<div id="OutputReports">
	</div>
}

@section scripts {
	<script src="~/Scripts/bootstrap-datepicker.min.js"></script>
	<script src="~/Scripts/bootstrap-select.min.js"></script>
	<script src="~/Scripts/jquery.validate.js"></script>
	<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
	<script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>

	<script src="~/Scripts/Custom/setSettingsDatePickerOnSearchForm.js"></script>
	<script src="~/Scripts/Custom/changeStatusLoadingIcon.js"></script>
	<script src="~/Scripts/Custom/actionsAfterFail.js"></script>
	<script src="~/Scripts/Custom/disableInputs.js"></script>
	<script src="~/Scripts/Custom/descriptionFunctionsOnSearchsEvents.js"></script>
	<script>
		function slideDownOutputReports() {
			$("#OutputReports")
				.hide()
				.slideDown(300);
		}
	</script>
	<script src="~/Scripts/Custom/changeRulesValidation.js"></script>
	<script src="~/Scripts/Custom/disableManagerDropdown.js"></script>
}